{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\n\nclass SafePipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n\n  transform(value, type) {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n\n      case 'script':\n        return this.sanitizer.bypassSecurityTrustScript(value);\n\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n      default:\n        throw new Error(`SafePipe unable to bypass security for invalid type: ${type}`);\n    }\n  }\n\n}\n\nSafePipe.ɵfac = function SafePipe_Factory(t) {\n  return new (t || SafePipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\n\nSafePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"safe\",\n  type: SafePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'safe',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n\nclass SafePipeModule {}\n\nSafePipeModule.ɵfac = function SafePipeModule_Factory(t) {\n  return new (t || SafePipeModule)();\n};\n\nSafePipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SafePipeModule\n});\nSafePipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafePipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SafePipe],\n      exports: [SafePipe]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of safe-pipe\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SafePipe, SafePipeModule };","map":{"version":3,"sources":["D:/OC/TicTacTrip/RV-trip-finder/node_modules/safe-pipe/fesm2015/safe-pipe.mjs"],"names":["i0","Pipe","NgModule","i1","SafePipe","constructor","sanitizer","transform","value","type","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","Error","ɵfac","DomSanitizer","ɵpipe","args","name","pure","SafePipeModule","ɵmod","ɵinj","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,eAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;;AAEA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,EAAAA,SAAS,CAACC,KAAD,EAAQC,IAAR,EAAc;AACnB,YAAQA,IAAR;AACI,WAAK,MAAL;AACI,eAAO,KAAKH,SAAL,CAAeI,uBAAf,CAAuCF,KAAvC,CAAP;;AACJ,WAAK,OAAL;AACI,eAAO,KAAKF,SAAL,CAAeK,wBAAf,CAAwCH,KAAxC,CAAP;;AACJ,WAAK,QAAL;AACI,eAAO,KAAKF,SAAL,CAAeM,yBAAf,CAAyCJ,KAAzC,CAAP;;AACJ,WAAK,KAAL;AACI,eAAO,KAAKF,SAAL,CAAeO,sBAAf,CAAsCL,KAAtC,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,KAAKF,SAAL,CAAeQ,8BAAf,CAA8CN,KAA9C,CAAP;;AACJ;AACI,cAAM,IAAIO,KAAJ,CAAW,wDAAuDN,IAAK,EAAvE,CAAN;AAZR;AAcH;;AAnBU;;AAqBfL,QAAQ,CAACY,IAAT;AAAA,mBAAqGZ,QAArG,EAA2FJ,EAA3F,mBAA+HG,EAAE,CAACc,YAAlI;AAAA;;AACAb,QAAQ,CAACc,KAAT,kBAD2FlB,EAC3F;AAAA;AAAA,QAAmGI,QAAnG;AAAA;AAAA;;AACA;AAAA,qDAF2FJ,EAE3F,mBAA2FI,QAA3F,EAAiH,CAAC;AACtGK,IAAAA,IAAI,EAAER,IADgG;AAEtGkB,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,IAAI,EAAE,MADP;AAECC,MAAAA,IAAI,EAAE;AAFP,KAAD;AAFgG,GAAD,CAAjH,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAEZ,MAAAA,IAAI,EAAEN,EAAE,CAACc;AAAX,KAAD,CAAP;AAAqC,GAN/E;AAAA;;AAQA,MAAMK,cAAN,CAAqB;;AAErBA,cAAc,CAACN,IAAf;AAAA,mBAA2GM,cAA3G;AAAA;;AACAA,cAAc,CAACC,IAAf,kBAb2FvB,EAa3F;AAAA,QAA4GsB;AAA5G;AACAA,cAAc,CAACE,IAAf,kBAd2FxB,EAc3F;;AACA;AAAA,qDAf2FA,EAe3F,mBAA2FsB,cAA3F,EAAuH,CAAC;AAC5Gb,IAAAA,IAAI,EAAEP,QADsG;AAE5GiB,IAAAA,IAAI,EAAE,CAAC;AACCM,MAAAA,YAAY,EAAE,CAACrB,QAAD,CADf;AAECsB,MAAAA,OAAO,EAAE,CAACtB,QAAD;AAFV,KAAD;AAFsG,GAAD,CAAvH;AAAA;AAQA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASA,QAAT,EAAmBkB,cAAnB","sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\n\nclass SafePipe {\n    constructor(sanitizer) {\n        this.sanitizer = sanitizer;\n    }\n    transform(value, type) {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`SafePipe unable to bypass security for invalid type: ${type}`);\n        }\n    }\n}\nSafePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\nSafePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, name: \"safe\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'safe',\n                    pure: true\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass SafePipeModule {\n}\nSafePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSafePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipeModule, declarations: [SafePipe], exports: [SafePipe] });\nSafePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: SafePipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [SafePipe],\n                    exports: [SafePipe]\n                }]\n        }] });\n\n/*\n * Public API Surface of safe-pipe\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SafePipe, SafePipeModule };\n"]},"metadata":{},"sourceType":"module"}